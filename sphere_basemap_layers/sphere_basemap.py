# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SphereBasemap
                                 A QGIS plugin
 This plugin let you to add a variety of thailand basemap from Gistda Sphere Open Platform
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-01-12
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Gistda Sphere
        email                : info@gistda.or.th
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QLineEdit
from qgis.core import *
from urllib.request import urlopen
import json
import shapely.wkb
import shapely.wkt as wkt
from shapely.geometry import MultiPolygon
from qgis.PyQt.QtCore import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .sphere_basemap_dialog import SphereBasemapDialog
import os.path


class SphereBasemap:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SphereBasemap_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Sphere Basemap Layers')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SphereBasemap', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=False,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToRasterMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = 'C:/Users/GISTDAMCNB07/AppData/Roaming/QGIS/QGIS3/profiles/default/python/plugins/sphere_basemap/key.png'
        icon_path_layer = 'C:/Users/GISTDAMCNB07/AppData/Roaming/QGIS/QGIS3/profiles/default/python/plugins/sphere_basemap/worldwide.png'
        icon_path_vector = 'C:/Users/GISTDAMCNB07/AppData/Roaming/QGIS/QGIS3/profiles/default/python/plugins/sphere_basemap/layers.png'
        # self.add_action(
        #     icon_path,
        #     text=self.tr(u'Input your API key'),
        #     callback=self.run,
        #     parent=self.iface.mainWindow())
        
        self.add_action(
                icon_path_layer,
                text=self.tr(u'Sphere Streets'),
                callback=self.sphereStreets,
                parent=self.iface.mainWindow())

        self.add_action(
                icon_path_layer,
                text=self.tr(u'Sphere Hybrid'),
                callback=self.sphereHybrid,
                parent=self.iface.mainWindow())
        
        self.add_action(
                icon_path_layer,
                text=self.tr(u'Sphere Transparent'),
                callback=self.sphereTransparent,
                parent=self.iface.mainWindow())
        
        self.add_action(
                icon_path_layer,
                text=self.tr(u'Sphere NASA bluemarble'),
                callback=self.sphereBluemarble,
                parent=self.iface.mainWindow())
        
        self.add_action(
                icon_path_layer,
                text=self.tr(u'Sphere Thailand Imageries'),
                callback=self.ThailandImages,
                parent=self.iface.mainWindow())
        
        self.add_action(
                icon_path_layer,
                text=self.tr(u'Sphere Thailand Satellite 2564'),
                callback=self.ThailandSatellite,
                parent=self.iface.mainWindow())
        
        # self.add_action(
        #         icon_path_vector,
        #         text=self.tr(u'Province bbox'),
        #         callback=self.bboxProvince, 
        #         parent=self.iface.mainWindow())
        
        # self.add_action(
        #         icon_path_vector,
        #         text=self.tr(u'Test OpenAPIs'),
        #         callback=self.openAPI, 
        #         parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
    
    def sphereStreets(self):
        key = 'key=A7EB31EBD2884CA3B0FD5E37A781102E'
        
        # valueKey = self.dlg.lineEdit.text()
        # if valueKey == '':
        #     self.iface.messageBar().pushMessage('Please input API key', level=Qgis.Warning)
        # else:
        url_streets = 'type=xyz&url=https://basemap.sphere.gistda.or.th/tiles/sphere_streets/EPSG3857/{z}/{x}/{y}.png?' + key
        rlayer_streets = QgsRasterLayer(url_streets, 'GISTDA Sphere streets', 'wms')
        QgsProject.instance().addMapLayer(rlayer_streets)
        self.iface.messageBar().pushMessage('Success to add GISTDA Sphere streets layer', level=Qgis.Success)

    def sphereHybrid(self):
        # valueKey = self.dlg.lineEdit.text()
        # if valueKey == '':
        #     self.iface.messageBar().pushMessage('Please input API key', level=Qgis.Warning)
        # else:
            url_streets = 'type=xyz&url=https://basemap.sphere.gistda.or.th/tiles/sphere_hybrid/EPSG3857/{z}/{x}/{y}.jpeg?key=A7EB31EBD2884CA3B0FD5E37A781102E'
            rlayer_streets = QgsRasterLayer(url_streets, 'GISTDA Sphere hybrid', 'wms')
            QgsProject.instance().addMapLayer(rlayer_streets)
            self.iface.messageBar().pushMessage('Success to add GISTDA Sphere hybrid layer', level=Qgis.Success)
    
    def sphereTransparent(self):
        # valueKey = self.dlg.lineEdit.text()
        # if valueKey == '':
        #     self.iface.messageBar().pushMessage('Please input API key', level=Qgis.Warning)
        # else:
            url_streets = 'type=xyz&url=https://basemap.sphere.gistda.or.th/tiles/sphere_transparent/EPSG3857/{z}/{x}/{y}.png?key=A7EB31EBD2884CA3B0FD5E37A781102E'
            rlayer_streets = QgsRasterLayer(url_streets, 'GISTDA Sphere transparent', 'wms')
            QgsProject.instance().addMapLayer(rlayer_streets)
            self.iface.messageBar().pushMessage('Success to add GISTDA Sphere transparent layer', level=Qgis.Success)
    
    def ThailandSatellite(self):
        # valueKey = self.dlg.lineEdit.text()
        # if valueKey == '':
        #     self.iface.messageBar().pushMessage('Please input API key', level=Qgis.Warning)
        # else:
            url_streets = 'type=xyz&url=https://basemap.sphere.gistda.or.th/tiles/thailand_satellite64/EPSG3857/{z}/{x}/{y}.png?key=A7EB31EBD2884CA3B0FD5E37A781102E'
            rlayer_streets = QgsRasterLayer(url_streets, 'GISTDA Sphere Thailand satellite 2564', 'wms')
            QgsProject.instance().addMapLayer(rlayer_streets)
            self.iface.messageBar().pushMessage('Success to add GISTDA Sphere Thailand satellite 2564 layer', level=Qgis.Success)
    
    def sphereBluemarble(self):
        # valueKey = self.dlg.lineEdit.text()
        # if valueKey == '':
        #     self.iface.messageBar().pushMessage('Please input API key', level=Qgis.Warning)
        # else:
            url_streets = 'type=xyz&url=https://basemap.sphere.gistda.or.th/tiles/bluemarble/EPSG3857/{z}/{x}/{y}.jpeg?key=A7EB31EBD2884CA3B0FD5E37A781102E'
            rlayer_streets = QgsRasterLayer(url_streets, 'GISTDA Sphere NASA bluemarble', 'wms')
            QgsProject.instance().addMapLayer(rlayer_streets)
            self.iface.messageBar().pushMessage('Success to add GISTDA Sphere NASA bluemarble layer', level=Qgis.Success)
    
    def ThailandImages(self):
        # valueKey = self.dlg.lineEdit.text()
        # if valueKey == '':
        #     self.iface.messageBar().pushMessage('Please input API key', level=Qgis.Warning)
        # else:
            url_streets = 'type=xyz&url=https://basemap.sphere.gistda.or.th/tiles/thailand_images/EPSG3857/{z}/{x}/{y}.jpeg?key=A7EB31EBD2884CA3B0FD5E37A781102E'
            rlayer_streets = QgsRasterLayer(url_streets, 'GISTDA Thailand images', 'wms')
            QgsProject.instance().addMapLayer(rlayer_streets)
            self.iface.messageBar().pushMessage('Success to add GISTDA Thailand images layer', level=Qgis.Success)
            
            # validate = rlayer_streets.isValid()
            # if str(validate) == 'True':
            #     QgsProject.instance().addMapLayer(rlayer_streets)
            #     self.iface.messageBar().pushMessage('Success to add GISTDA Thailand images Layer', level=Qgis.Success)
            # else:
            #     self.iface.messageBar().pushMessage('Invalid layer', level=Qgis.Critical)
    
    def inputAPIkey(self):
        valueKey = self.dlg.lineEdit.text()
        #messagePopup = "Your key '" + valueKey + "' were added"
        mss = "Success! Your API key were added"
        emptyKey = "API key value still empty"
        if valueKey == '':
            self.iface.messageBar().pushMessage(emptyKey, level=Qgis.Info)
        else:
            self.iface.messageBar().pushMessage(mss, level=Qgis.Success)
    
    def testInputKey(self):
        valueKey = self.dlg.lineEdit.text()
        messagePopup = "Your key '" + valueKey + "' still remaining"
        self.iface.messageBar().pushMessage(messagePopup, level=Qgis.Success)
    
    def bboxProvince(self):
        url = 'https://opendata.gistda.or.th/v1/general/bbox_province?'
        html = urlopen(url)
        data = json.load(html)
        # dict_keys(['code', 'name', 'bbox'])
        province_code = []
        province_name = []
        province_bbox = []

        bboxProv_layer = QgsVectorLayer("Polygon?csr=epsg:4326", "bbox_province", 'memory')
        QgsProject.instance().addMapLayer(bboxProv_layer)

        for i in range(len(data)):
            code = data[i]['code']
            name = data[i]['name']
            bbox = data[i]['bbox']

            province_code.append(code)
            province_name.append(name)
            # province_bbox.append(bbox)

            # Convert wkb to wkt
            bbox_wkt = shapely.wkb.loads(bytes.fromhex(bbox))
            province_bbox.append(str(bbox_wkt))
            

            # Create vector layer
            bboxProv_layer.startEditing()
            geom = QgsGeometry()
            geom = QgsGeometry.fromWkt(str(bbox_wkt))
            feat = QgsFeature()
            feat.setGeometry(geom)
            bboxProv_layer.dataProvider().addFeatures([feat])
            bboxProv_layer.commitChanges()

            # Create field
            layer = QgsProject.instance().mapLayersByName('bbox_province')
            pr = layer[0].dataProvider()
            pr.addAttributes([QgsField("code", QVariant.String, "text", 254)])
            pr.addAttributes([QgsField("name", QVariant.String, "text", 254)])
            layer[0].updateFields()

            # Add field value
            code_idx = layer[0].fields().lookupField('code')
            name_idx = layer[0].fields().lookupField('name')

            atts = {code_idx: code, name_idx: name}
            feats = layer[0].getFeature(i+1)
            pr.changeAttributeValues({feats.id(): atts})
        
        self.iface.messageBar().pushMessage("Success! bboxWKT was added", level=Qgis.Success)
        
        # c = MultiPolygon(map(wkt.loads, province_bbox))
        # self.iface.messageBar().pushMessage(str(province_bbox), level=Qgis.Success)
        # list_layer = QgsVectorLayer("Polygon?csr=epsg:4326", "bboxWKT_all", 'memory')
        # QgsProject.instance().addMapLayer(list_layer)
        # list_layer.startEditing()
        # geom = QgsGeometry()
        # geom = QgsGeometry.fromWkt(str(c))
        # feat = QgsFeature()
        # feat.setGeometry(geom)
        # list_layer.dataProvider().addFeatures([feat])
        # list_layer.commitChanges()

        # # Create field
        # layer = QgsProject.instance().mapLayersByName('bboxWKT_all')
        # pr = layer[0].dataProvider()
        # pr.addAttributes([QgsField("code", QVariant.String, "text", 254)])
        # pr.addAttributes([QgsField("name", QVariant.String, "text", 254)])
        # layer[0].updateFields()
    
    def openAPI(self):
        address = ''

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&Sphere Basemap Layers'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SphereBasemapDialog()
            # hide key when input
            self.dlg.lineEdit.setEchoMode(QLineEdit.Password)
            self.dlg.button_box.accepted.connect(self.inputAPIkey)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
